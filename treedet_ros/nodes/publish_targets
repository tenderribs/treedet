#!/usr/bin/env python

import os
import pandas as pd
import rospy
import rospkg

from harveri_msgs.msg import HarveriDetectedTree, HarveriDetectedTrees

FREQ_HZ = 1


def constr_msgs(df: pd.DataFrame) -> HarveriDetectedTrees:
    tree_list = HarveriDetectedTrees()
    tree_list.header.frame_id = df.iloc[0]["frame_id"]
    for i in range(len(df)):
        if df.iloc[i]["selected"]:
            msg = HarveriDetectedTree()
            msg.id = i

            msg.x = df.iloc[i]["position_x"]
            msg.y = df.iloc[i]["position_y"]
            msg.z = df.iloc[i]["position_z"]
            msg.dim_x = df.iloc[i]["dim_x"]
            msg.dim_y = df.iloc[i]["dim_y"]
            msg.dim_z = df.iloc[i]["dim_z"]
            tree_list.trees.append(msg)
    return tree_list


def main():
    pub = rospy.Publisher("/tree_det/tree_targets", HarveriDetectedTrees, queue_size=10)
    rospy.init_node("treedet_target_publisher")
    r = rospy.Rate(FREQ_HZ)

    package_path = rospkg.RosPack().get_path("treedet_ros")
    csv_path = os.path.join(package_path, "scripts", "trees_found.csv")

    if not os.path.isfile(csv_path):
        rospy.logerror(f"tree targets CSV file not found at {csv_path}")
        return

    df = pd.read_csv(csv_path)

    if len(df) == 0:
        rospy.logerror(f"CSV file at {csv_path} is empty")
        return

    while not rospy.is_shutdown():
        pub.publish(constr_msgs(df))
        r.sleep()


if __name__ == "__main__":
    main()
